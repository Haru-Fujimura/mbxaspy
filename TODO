## Main

	Initialize

	Input:

		Input from first-principles calculations

			Op 1 ) QE and shirley_xas 
			Input eigenvalues, eigenvectors, projectors, and single-particle matrix elements

			Op 2 ) QE with norm-conserving pseudos
			Input eigenvalues and wavefunctions from *.save

		Input variables from user-defined input files
		
	Calculate the \xi matrix for a given k-point

	Calculate x-ray spectra

# Initialization 

- [X] init.py

	 Detect if it is python 2.x or 3.x. DONE

	 Detect if it is mpi enviroment. DONE

	 Decide which version of numpy or scipy will be used. 
	 Note that scipy linear algebra package is more efficient. DONE

	 Initialize the mpi environment. DONE

	 Define pools and split up k-points by pools.
	 Then split up band group over within each pool. 

- [X] defs.py

	 para_class DONE
	 user_input_class ...
	

# I/O

- [X] Input from fortran binary files

	 The local fortran code shirley_xas output the following quantities for 
	 a given self-consistent-field (scf) calculation:

	 1) *.eigval, the energies for the chosen number of bands, all double-precision

	 2) *.eigvec, the eigenvectors for the chosen bands, which are expanded in the 
		optimal basis set:

			< B_i | nk > 

		all double-complex

	 3) *.proj, the periodic function | nk > projected onto the PAW projectors:

			< beta_l | nk >

		all double-complex

 	 4) *.xmat, the core-level single-particle matrix element:

			< nk | \psi_h > 

		all double-complex

	Write up an utility that can read all of these quantities and convert them into python arrays.
	Because these quantities may need to be distributed over different cores, so be prepared to
	read a certain block of a binary file with a given offset.

- [X] Input variables from human-readable files (like Input_Block.in)

	Image that there is such an file:

	"
	nbnd_f = 300 # number of final-state orbitals
	# is_gamma = 
	
	nbnd_i=400
	job_done = .true.
	is_absorption =FALSE
	ecut = 30.0
	"

	should return a dictionary like:
	{'nbnd_f' : '300', 'nbnd_i' : '400', 'job_done' : '.true.', 'is_absorption' : 'FALSE', 'ecut' : '30.0'}

	Write up a parser to realize this or you may use some open-source parser shared online. DONE

	Can this also be used to import an array ? DONE 

- [X] Message printer: using para.print

- [X] result output

	 You may use stdout

- [X] Input variables for an actual mbxas run

	 Required:

	 nbnd, nk, nelect, ncore (# of core excited atoms)
	 which can be found in *.info in the scf folder

	 *.eigval, *.eigvec, *.proj, *.xmat (only for ground-state)
	 
	 sij.dat for core excited atoms.
	 sij.dat in the pseudo folder should have the format:
	 elem.ground_pseudo_name.sij such as O.pbe-van-yufengl.sij, O.pbe-van_bm.sij, ...

	 A sample of input file (taken from stdin)

	 scf_type = 'shirley_xas' # there should be more in future
	 ipath = '/your_path/to/the_initial_state_scf' # like XAS/system_name/GS
	 fpath = '/your_path/to/the_final_state_scf'   # like XAS/system_name/Xatom_1
	 nbnd = user_specified_value     # default: initial-state nbnd
	 nelect = user_specified_value   # default: initial-state nelect
	 ... # other user-defined values

# Calculate the \xi matrix

- [X] An utility to calculate \xi

# Calculate Afc and x-ray spectra [X]

## Developments

# Multiple core levels with spin-orbit coupling

- [ ] Use Clebsch-Gordan coefficients to construct the core level wavefunctions

# RIXS

- [ ] Check the source of large-memory usage in the main code

- [ ] Check the compatibility with multiple core levels

# Problems

- [.] If you use more procs, the code will crash when reading eigvec (out of memory ?!).
